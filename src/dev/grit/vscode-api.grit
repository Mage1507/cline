or {
	// Block all vscode imports
	`import * as vscode from "vscode"` where {
		register_diagnostic(span=`import * as vscode from "vscode"`, message="VSCode API usage is only allowed in src/hosts/vscode/ or extension.ts. Using the VSCode API is not compatible cross-platform and won't work on JetBrains or CLI.")
	},
	`import vscode from "vscode"` where {
		register_diagnostic(span=`import vscode from "vscode"`, message="VSCode API usage is only allowed in src/hosts/vscode/ or extension.ts. Using the VSCode API is not compatible cross-platform and won't work on JetBrains or CLI.")
	},
	`import { $imports } from "vscode"` where {
		not or {
			$imports <: `workspace`,
			$imports <: `ExtensionContext`,
			$imports <: `commands`,
			$imports <: `LanguageModelChatSelector`
		},
		register_diagnostic(span=$imports, message="VSCode API usage is only allowed in src/hosts/vscode/ or extension.ts. Using the VSCode API is not compatible cross-platform and won't work on JetBrains or CLI. Only 'workspace' and 'ExtensionContext' imports are allowed.")
	},
	`const vscode = require("vscode")` where {
		register_diagnostic(span=`const vscode = require("vscode")`, message="VSCode API usage is only allowed in src/hosts/vscode/ or extension.ts. Using the VSCode API is not compatible cross-platform and won't work on JetBrains or CLI.")
	},
	`const { $imports } = require("vscode")` where {
		register_diagnostic(span=`const { $imports } = require("vscode")`, message="VSCode API usage is only allowed in src/hosts/vscode/ or extension.ts. Using the VSCode API is not compatible cross-platform and won't work on JetBrains or CLI.")
	},
	`import("vscode")` where {
		register_diagnostic(span=`import("vscode")`, message="VSCode API usage is only allowed in src/hosts/vscode/ or extension.ts. Using the VSCode API is not compatible cross-platform and won't work on JetBrains or CLI.")
	},
	// Block workspace API calls except getConfiguration, when getConfiguration is migrated this exception can be removed.
	`vscode.workspace.$method($args)` where {
		not $method <: `getConfiguration`,
		register_diagnostic(span=`vscode.workspace.$method`, message="Only vscode.workspace.getConfiguration() is allowed. Other workspace methods like $method are restricted for cross-platform compatibility.")
	},
	`workspace.$method($args)` where {
		not $method <: `getConfiguration`,
		register_diagnostic(span=`workspace.$method`, message="Only workspace.getConfiguration() is allowed. Other workspace methods like $method are restricted for cross-platform compatibility.")
	},
	// Block vscode.commands API calls except executeCommand
	`vscode.commands.$method($args)` where {
		not $method <: `executeCommand`,
		register_diagnostic(span=`vscode.commands.$method`, message="Only commands.executeCommand() is allowed. Other commands methods like $method are restricted for cross-platform compatibility.")
	},
	`commands.$method($args)` where {
		not $method <: `executeCommand`,
		register_diagnostic(span=`commands.$method`, message="Only commands.executeCommand() is allowed. Other commands methods like $method are restricted for cross-platform compatibility.")
	},
	// Block specific ExtensionContext properties and methods
	`$context.asAbsolutePath($args)` where {
		register_diagnostic(span=`$context.asAbsolutePath($args)`, message="ExtensionContext.asAbsolutePath() is restricted for cross-platform compatibility.")
	},
	`$context.storageUri` where {
		register_diagnostic(span=`$context.storageUri`, message="ExtensionContext.storageUri is restricted for cross-platform compatibility.")
	},
	// `$context.globalStorageUri` where {
	// 	register_diagnostic(span=`$context.globalStorageUri`, message="ExtensionContext.globalStorageUri is restricted for cross-platform compatibility.")
	// },
	`$context.logUri` where {
		register_diagnostic(span=`$context.logUri`, message="ExtensionContext.logUri is restricted for cross-platform compatibility.")
	},
	// `$context.extensionUri` where {
	// 	register_diagnostic(span=`$context.extensionUri`, message="ExtensionContext.extensionUri is restricted for cross-platform compatibility.")
	// },
	`$context.extensionPath` where {
		register_diagnostic(span=`$context.extensionPath`, message="ExtensionContext.extensionPath is restricted for cross-platform compatibility.")
	},
	// `$context.workspaceState` where {
	// 	register_diagnostic(span=`$context.workspaceState`, message="ExtensionContext.workspaceState is restricted for cross-platform compatibility.")
	// },
	// `$context.globalState` where {
	// 	register_diagnostic(span=`$context.globalState`, message="ExtensionContext.globalState is restricted for cross-platform compatibility.")
	// },
	// `$context.secrets` where {
	// 	register_diagnostic(span=`$context.secrets`, message="ExtensionContext.secrets is restricted for cross-platform compatibility.")
	// },
	`$context.subscriptions` where {
		register_diagnostic(span=`$context.subscriptions`, message="ExtensionContext.subscriptions is restricted for cross-platform compatibility.")
	},
	`$context.environmentVariableCollection` where {
		register_diagnostic(span=`$context.environmentVariableCollection`, message="ExtensionContext.environmentVariableCollection is restricted for cross-platform compatibility.")
	},
	`$context.extension` where {
		register_diagnostic(span=`$context.extension`, message="ExtensionContext.extension is restricted for cross-platform compatibility.")
	}
}
